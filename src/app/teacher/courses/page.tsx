"use client"
import useSWR from 'swr'
import { fetcher } from '@/lib/fetcher'
import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Button } from '@/components/ui/button'

type Course = { id: string; title: string; description?: string | null; capacity: number }

export default function CoursesPage() {
  const { data, mutate, isLoading } = useSWR<Course[]>("/api/teacher/courses", fetcher)
  const [form, setForm] = useState({ title: '', description: '', capacity: 1 })
  const [isCreating, setIsCreating] = useState(false)

  async function createCourse() {
    if (!form.title.trim()) return
    
    setIsCreating(true)
    try {
      await fetch('/api/course', { 
        method: 'POST', 
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(form) 
      })
      setForm({ title: '', description: '', capacity: 1 })
      mutate()
    } catch (error) {
      console.error('Error creating course:', error)
    } finally {
      setIsCreating(false)
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="space-y-2">
        <h1 className="text-3xl font-bold tracking-tight">‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h1>
        <p className="text-muted-foreground">
          ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô
        </p>
      </div>

      {/* Add Course Form */}
      <Card>
        <CardHeader>
          <CardTitle>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà</CardTitle>
          <CardDescription>
            ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            <div className="space-y-2">
              <label className="text-sm font-medium">‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™</label>
              <Input 
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" 
                value={form.title} 
                onChange={e => setForm({ ...form, title: e.target.value })}
                required
              />
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</label>
              <Input 
                placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏£‡πå‡∏™" 
                value={form.description} 
                onChange={e => setForm({ ...form, description: e.target.value })}
              />
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î</label>
              <Input 
                type="number" 
                placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô" 
                value={form.capacity} 
                onChange={e => setForm({ ...form, capacity: Number(e.target.value) })}
                min="1"
                required
              />
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium opacity-0">‡πÄ‡∏û‡∏¥‡πà‡∏°</label>
              <Button 
                onClick={createCourse} 
                disabled={isCreating || !form.title.trim()}
                className="w-full"
              >
                {isCreating ? (
                  <div className="flex items-center gap-2">
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin" />
                    ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...
                  </div>
                ) : (
                  '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™'
                )}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Courses List */}
      <Card>
        <CardHeader>
          <CardTitle>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</CardTitle>
          <CardDescription>
            ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ({data?.length || 0} ‡∏Ñ‡∏≠‡∏£‡πå‡∏™)
          </CardDescription>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="flex items-center justify-center py-8">
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin" />
                <span className="text-muted-foreground">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</span>
              </div>
            </div>
          ) : (
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {(data ?? []).map(course => (
                <div key={course.id} className="p-4 border rounded-lg hover:shadow-md transition-shadow">
                  <div className="flex items-start gap-3">
                    <div className="w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center">
                      <span className="text-2xl">üìö</span>
                    </div>
                    <div className="flex-1 min-w-0">
                      <h3 className="font-semibold text-lg truncate">{course.title}</h3>
                      {course.description && (
                        <p className="text-sm text-muted-foreground mt-1 line-clamp-2">
                          {course.description}
                        </p>
                      )}
                      <div className="flex items-center gap-4 mt-3">
                        <div className="flex items-center gap-1 text-sm text-muted-foreground">
                          <span>üë•</span>
                          <span>‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {course.capacity} ‡∏Ñ‡∏ô</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
              
              {(data?.length ?? 0) === 0 && (
                <div className="col-span-full text-center py-8 text-muted-foreground">
                  <span className="text-4xl mb-4 block">üìö</span>
                  <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</p>
                  <p className="text-sm">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏£‡∏Å</p>
                </div>
              )}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Stats */}
      {data && data.length > 0 && (
        <div className="grid gap-4 md:grid-cols-3">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</CardTitle>
              <span className="text-2xl">üìö</span>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{data.length}</div>
              <p className="text-xs text-muted-foreground">
                ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏ô
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏£‡∏ß‡∏°</CardTitle>
              <span className="text-2xl">üë•</span>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {data.reduce((sum, course) => sum + course.capacity, 0)}
              </div>
              <p className="text-xs text-muted-foreground">
                ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              </p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢</CardTitle>
              <span className="text-2xl">üìä</span>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {Math.round(data.reduce((sum, course) => sum + course.capacity, 0) / data.length)}
              </div>
              <p className="text-xs text-muted-foreground">
                ‡∏ï‡πà‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™
              </p>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}


