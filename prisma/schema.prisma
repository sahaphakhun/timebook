// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================
// Enums
// ============================

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum BookingStatus {
  BOOKED
  CANCELLED
}

// ============================
// Core Models
// ============================

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  hashedPassword  String?
  role            Role     @default(STUDENT)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Teacher specific fields
  profileImage    String?  // URL to profile image
  bio             String?  // Teacher biography/description
  specialties     String[] // Array of teaching specialties
  experience      Int?     // Years of experience
  education       String?  // Educational background
  phone           String?  // Contact phone number

  // Relations
  availabilities  Availability[]
  timeslots       Timeslot[]
  bookings        Booking[]       @relation("StudentBookings")
  teacherBookings Booking[]       @relation("TeacherBookings")
  auditLogs       AuditLog[]

  // NextAuth
  accounts        Account[]
  sessions        Session[]
}

// Course model removed - system now uses direct teacher bookings

model Availability {
  id         String   @id @default(cuid())
  teacherId  String
  weekday    Int      // 0-6 (Sun-Sat)
  startTime  String   // "HH:mm"
  endTime    String   // "HH:mm"

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  teacher    User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@index([teacherId])
}

model Timeslot {
  id             String    @id @default(cuid())
  teacherId      String
  dateTimeStart  DateTime
  dateTimeEnd    DateTime
  isAvailable    Boolean   @default(true)

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  teacher        User      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  bookings       Booking[]

  @@index([teacherId])
  @@index([dateTimeStart])
  @@index([dateTimeEnd])
}

model Booking {
  id          String         @id @default(cuid())
  timeslotId  String
  studentId   String
  teacherId   String
  status      BookingStatus  @default(BOOKED)
  notes       String?        // Optional notes for the lesson

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  timeslot    Timeslot       @relation(fields: [timeslotId], references: [id], onDelete: Cascade)
  student     User           @relation("StudentBookings", fields: [studentId], references: [id], onDelete: Cascade)
  teacher     User           @relation("TeacherBookings", fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([timeslotId, studentId])
  @@index([studentId])
  @@index([teacherId])
  @@index([timeslotId])
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  userId    String?
  meta      Json?
  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([createdAt])
}

// ============================
// NextAuth Models (Prisma Adapter)
// ============================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
